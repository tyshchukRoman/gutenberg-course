/*
 * File Description:
 * 
 * Here we will save our scss mixins
 */


/* ================
 *  @mixin heading
 * ================
 * It is used in components/_headings.sass file
 * allows to describe heading elements pretty
 */
@mixin heading(
  $font-size,
  $color: $heading-color-default,
  $line-height: $heading-line-height,
  $font-family: $heading-font-family,
  $text-transform: $heading-text-transform,
  $letter-spacing: $heading-letter-spacing,
  $font-weight: $heading-font-weight
) {
  font-size: $font-size;
  color: $color;
  font-family: $font-family;
  line-height: $line-height;
  text-transform: $text-transform;
  letter-spacing: $letter-spacing;
  font-weight: $font-weight;
}


/* ===================
 *  @mixin max-screen
 * ===================
 * It is used everywhere
 * $size - is key from the $breakpoints map `abstracts/_breakpoints.scss`
 */
@mixin max-screen($size) {
  @if map-has-key($breakpoints, $size) {
    $breakpoint: map-get($breakpoints, $size);
    @media screen and (max-width: $breakpoint) {
      @content;
    }
  } @else if type-of($size) == "number" {
    @if unitless($size) {
      @error 'when using a number with @max-screen() make sure to include a unit';
    } @else {
      @media screen and (max-width: $size) {
        @content;
      }
    }
  } @else {
    @error 'the keyword #{$size} is not in the $breakpoints map';
  }
}


/* ===================
 *  @mixin min-screen
 * ===================
 * It is used everywhere
 * $size - is key from the $breakpoints map `abstracts/_breakpoints.scss`
 */
@mixin min-screen($size) {
  @if map-has-key($breakpoints, $size) {
    $breakpoint: map-get($breakpoints, $size);
    @media screen and (min-width: $breakpoint) {
      @content;
    }
  } @else if type-of($size) == "number" {
    @if unitless($size) {
      @error 'when using a number with @min-screen() make sure to include a unit';
    } @else {
      @media screen and (min-width: $size) {
        @content;
      }
    }
  } @else {
    @error 'the keyword #{$size} is not in the $breakpoints map';
  }
}


/* ==================
 *  @mixin can-hover 
 * ==================
 * mixin to check if current device is hoverable
 * usually, for desktops
 */
@mixin can-hover {
  @media (hover: hover) {
    @content;
  }
}


/* =====================
 *  @mixin cannot-hover 
 * =====================
 * mixin to check if current device is not hoverable
 * usually, for mobiles
 */
@mixin cannot-hover {
  @media (hover: none) {
    @content;
  }
}


/* =====================
 *  @mixin is-dark-mode 
 * =====================
 * mixin to check for dark mode
 */
@mixin is-dark-mode {
  :root[data-mode="dark"] & {
    @content;
  }
}


/* ======================
 *  @mixin is-light-mode 
 * ======================
 * mixin to check for light mode
 */
@mixin is-light-mode {
  :root[data-mode="light"] & {
    @content;
  }
}


/* =======================
 *  @mixin reduced-motion 
 * =======================
 * mixin to check if user prefers reduced motions
 * used for accessibility
 */
@mixin reduced-motion {
  &.reduce-motion {
    @content;
  }

  @at-root {
    @media (prefers-reduced-motion: reduce) {
      & {
        @content;
      }
    }
  }
}


/* =======================
 *  @mixin height-screen 
 * =======================
 */
@mixin height-screen {
  height: 100svh;
  height: 100vh;
}


/* ====================
 *  @mixin image-cover 
 * ====================
 */
@mixin image-cover {
  width: 100%;
  height: 100%;
  object-fit: cover;
}


/* ======================
 *  @mixin image-contain 
 * ======================
 */
@mixin image-contain {
  width: 100%;
  height: 100%;
  object-fit: contain;
}


/* ===========================
 *  @mixin screen-reader-only 
 * ===========================
 * Hide the element 
 * Make it visible for screen readers only
 * Used for accessibility
 */
@mixin screen-reader-only {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0,0,0,0);
  border: 0;
}


/* ===================
 *  @mixin hide-input 
 * ===================
 * Hide input
 */
@mixin hide-input {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  cursor: pointer;
  opacity: 0;
  -webkit-appearance: button;
}


/* ========================
 *  @mixin hide-input-file
 * ========================
 * Hide input of [type="file"]
 */
@mixin hide-input-file {
  @include hide-input;
  font-size: 100px;
  left: auto;
  right: 0;
  width: auto;
  height: auto;
}


/* ========================
 *  @mixin hide-scrollbar
 * ========================
 */
@mixin hide-scrollbar {
  -ms-overflow-style: none;
  scrollbar-width: none;
  &::-webkit-scrollbar {
    width: 0 !important;
  }
}


/* ========================
 *  @mixin adaptive-value
 * ========================
 */
$maxWidth: 1920;
$maxWidthContainer: 1780;

@mixin adaptive-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;

  @if $type == 1 {
    // Smaller than container
    #{$property}: #{$startSize}px;

    @media (max-width: #{$maxWidthContainer}px) {
      #{$property}: calc(
        #{$minSize}px + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer -
              320})
      );
    }
  } @else if $type == 2 {
    // Bigger than container
    #{$property}: #{$startSize}px;

    @media (min-width: #{$maxWidthContainer}px) {
      #{$property}: calc(
        #{$minSize}px + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
      );
    }
  } @else {
    // All the time
    #{$property}: calc(
      #{$minSize}px + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
    );
  }
}
